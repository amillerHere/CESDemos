{"version":3,"file":"hds-checkbox.js","sourceRoot":"","sources":["../src/hds-checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {customElement} from '@here/hds-base';\nimport '@here/hds-icon';\nimport {html, LitElement, nothing, PropertyValues} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styles} from './hds-checkbox.css.js';\n\nexport type CheckboxSize = 'small' | 'medium';\nexport type CheckboxChangePayload = {\n  name: string;\n  id: string;\n  value: string | boolean | undefined;\n  checked: boolean;\n};\n\n/**\n * @summary Checkbox base class.\n *\n * @event {CustomEvent<{name: string, id: string; value: string | boolean | undefined, checked: boolean}>} change Fired when the checked value has changed `CheckboxChangePayload`\n *\n * @slot default Content placed in the label.\n * @slot description  Content placed in the description.\n */\n@customElement('hds-checkbox')\nexport class Checkbox extends LitElement {\n  static styles = styles;\n  static formAssociated = true;\n  @property({type: String, reflect: true}) size: CheckboxSize = 'medium';\n  @property({type: Boolean, reflect: true}) checked = false;\n  @property({type: Boolean, reflect: true}) disabled = false;\n  @property({type: Boolean, reflect: true}) required = false;\n  @property({type: Boolean, attribute: false}) indeterminate = false;\n  @property({type: String, reflect: true}) id = '';\n  @property({type: String, reflect: true}) name = '';\n  @property({type: String, attribute: 'aria-label'}) ariaLabel: string = '';\n  @property({type: Boolean, attribute: 'show-required'}) showRequired = false;\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @property({type: String, attribute: 'value', reflect: true}) _value: string | boolean = 'on';\n\n  get value(): string | boolean | undefined {\n    if (this.checked) {\n      return this._value;\n    }\n    return undefined;\n  }\n\n  set value(v: string | boolean | undefined) {\n    if (v === undefined) {\n      this._value = 'on';\n      this.checked = false;\n    } else {\n      if (typeof v === 'boolean') {\n        this.checked = v;\n      }\n      this._value = v;\n    }\n  }\n\n  get defaultChecked(): boolean {\n    return this.formElement.defaultChecked;\n  }\n\n  protected updated(_changedProperties: PropertyValues) {\n    if (_changedProperties.has('checked') && _changedProperties.get('checked') !== undefined) {\n      this._propertyChangeHandler();\n    }\n\n    if (_changedProperties.has('indeterminate')) {\n      this.formElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  protected render() {\n    const classes = {\n      disabled: this.disabled,\n      '-checked': this.checked || this.indeterminate,\n      'hds-checkbox--size-small': this.size === 'small',\n    };\n    return html`\n      <label class=\"-hds-checkbox-wrapper ${classMap(classes)}\">\n        <input\n          type=\"checkbox\"\n          id=\"${ifDefined(this.id === '' ? undefined : this.id)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          ?checked=\"${this.checked}\"\n          .value=\"${this.value}\"\n          ?disabled=\"${this.disabled}\"\n          ?required=\"${this.required}\"\n          @change=\"${this._changeHandler}\"\n          @click=\"${e => e.stopPropagation()}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n        />\n        <span class=\"checkbox-trigger\"> ${this.displayIcon()} </span>\n        ${this.renderContent()}\n      </label>\n    `;\n  }\n\n  private displayIcon() {\n    const iconSize = this.size === 'small' ? '8px' : '16px';\n    const iconName = this.indeterminate ? 'minus' : 'checkmark';\n    return html` <hds-icon name=\"${iconName}\" size=\"${iconSize}\"></hds-icon>`;\n  }\n\n  private renderContent() {\n    return html` <div class=\"checkbox-content\">\n      <span class=\"checkbox-label\">\n        <slot></slot>\n        ${this.showRequired && this.required\n          ? html`<span class=\"checkbox-required\">*</span>`\n          : nothing}\n      </span>\n      <slot name=\"description\" class=\"description\"></slot>\n    </div>`;\n  }\n\n  private _changeHandler() {\n    this.checked = this.formElement.checked;\n  }\n\n  private _propertyChangeHandler() {\n    this.formElement.checked = this.checked;\n    this.dispatchEvent(\n      new CustomEvent<CheckboxChangePayload>('change', {\n        detail: {name: this.name, id: this.id, value: this.value, checked: this.checked},\n      })\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hds-checkbox': Checkbox;\n  }\n}\n"]}